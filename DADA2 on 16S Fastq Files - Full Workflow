#Before starting, make sure to unzip the fastq files. Can use gzip -d command on terminal to do this
library(dada2)
path <- "~/Fastq")
#The list files command should list all the paired end reads for each sample.
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Plot the Read Quality for the forward and reverse paired end reads and put them in separate PDFs
pdf(file = "~/Fastq/Read_Quality_Profiles_FWD.pdf")
plotQualityProfile(fnFs[1:8])
plotQualityProfile(fnFs[9:16])
plotQualityProfile(fnFs[17:24])
plotQualityProfile(fnFs[25:32])
plotQualityProfile(fnFs[33:40])
plotQualityProfile(fnFs[41:48])
plotQualityProfile(fnFs[49:56])
plotQualityProfile(fnFs[57:64])
plotQualityProfile(fnFs[65:72]).
dev.off()
pdf(file = "~/Fastq/Read_Quality_Profiles_REV.pdf")
plotQualityProfile(fnRs[1:8])
plotQualityProfile(fnRs[9:16])
plotQualityProfile(fnRs[17:24])
plotQualityProfile(fnRs[25:32])
plotQualityProfile(fnRs[33:40])
plotQualityProfile(fnRs[41:48])
plotQualityProfile(fnRs[49:56])
plotQualityProfile(fnRs[57:64])
plotQualityProfile(fnRs[65:72]).
dev.off()

# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
              maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
              compress=TRUE, multithread=TRUE) 
head(out)

errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

pdf(file = "~/Fastq/Error_Plots.pdf")
plotErrors(errF, nominalQ=TRUE)
dev.off()

dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
dadaFs[[1]]

mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])

seqtab <- makeSequenceTable(mergers)
dim(seqtab)

table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab)

#Track Number of Reads through the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)

taxa <- assignTaxonomy(seqtab.nochim, "~/tax/silva_nr_v132_train_set.fa.gz", multithread=TRUE)
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
